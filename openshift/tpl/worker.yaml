kind: Template
apiVersion: v1
metadata:
  name: "worker-template"
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    creationTimestamp:
    generation: 1
    labels:
      app: "worker"
    name: "worker"
    namespace: "${SERVICE_NAMESPACE}"
  spec: {}
  status:
    dockerImageRepository:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: "worker"
    name: "worker"
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: "worker:latest"
        namespace: "${SERVICE_NAMESPACE}"
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        ref: master
        uri: git@github.com:cloudstrap/${SERVICE_GITHUB_REPO_NAME}.git
      sourceSecret:
        name: githubdeploy
      type: Git
    strategy:
      sourceStrategy:
        env:
          - name: NODE_ENV
            value: dev
        from:
          kind: DockerImage
          name: cloudstrap/origin-s2i-nodejs:8
      type: Source
    triggers:
    - github:
        secret: 249fb8137ed52e01
      type: GitHub
    - generic:
        secret: b000cb9668a011a0
      type: Generic
    - type: ConfigChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: "worker"
    name: "worker"
  spec:
    replicas: 1
    selector:
      deploymentconfig: "worker"
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: "worker"
          deploymentconfig: "worker"
      spec:
        containers:
        - env:
          - name: PORT
            value: '${PORT}'
          - name: TANTALUS_AGENDA_DB_STRING
            value: '${TANTALUS_AGENDA_DB_STRING}'
          - name: SERVICE_NAME
            value: worker
          imagePullPolicy: Always
          name: "worker"
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              cpu: 300m
              memory: 640Mi
            requests:
              cpu: 200m
              memory: 512Mi
          livenessProbe:
            httpGet:
              path: "/health"
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 3
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: "/health"
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 3
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - "worker"
        from:
          kind: ImageStreamTag
          name: "worker:latest"
          namespace: "${SERVICE_NAMESPACE}"
      type: ImageChange
    - type: ConfigChange
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: "worker"
    name: "worker"
    namespace: "${SERVICE_NAMESPACE}"
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: "worker"
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
